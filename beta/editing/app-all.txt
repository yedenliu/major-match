################################################################################
#   Import modules
################################################################################
from pdb import find_function
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename
app = Flask(__name__)

import cs304dbi as dbi
import random
from prepared_queries import *
import bcrypt
# git hub
################################################################################
app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

################################################################################
#   Routing functions
################################################################################
@app.route('/')
def index():
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        return render_template('index.html',
                                page_title='Mainpage')
################################################################################

@app.route('/insert/', methods=['GET','POST'])
def insert():
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        conn = dbi.connect()
        if request.method == 'GET':
            return render_template('insert.html',page_title='Insert New Course')
        else:
            dept = request.form.get('dept') # required
            cnum = request.form.get('cnum') # required
            name = request.form.get('name') # required
            units = request.form.get('units')
            max_enroll = request.form.get('max_enroll')
            prereq = request.form.get('prereq')
            instruct = request.form.get('instruct')
            dr = request.form.get('dr')
            sem_offered = request.form.get('sem_offered')
            year_offered = request.form.get('year_offered')
            
            # all required fields must be filled out
            if len(dept) == 0 or len(cnum) == 0 or len(name) == 0:
                flash('Missing required field(s)')
                return render_template('insert.html',page_title='Insert New Course')
            if not (course_name_exists(conn, dept, cnum)): # if course doesn't exist
                insert_course(conn, dept, cnum, name, units, max_enroll, prereq, 
                            instruct, dr, sem_offered, year_offered)
                cid = get_cid(conn, dept, cnum)
                return redirect(url_for('update', cid=cid))
            flash('Course already exists')
            return render_template('insert.html',page_title='Insert New Course')

################################################################################

@app.route('/select/', methods=['GET','POST'])
def select():
    '''
    on GET shows a menu of incomplete courses 
    on POST redirects to the /update/<cid> page for that course.
    Incomplete means missing required fields
    Unmatched means they have yet to be assigned to a major
    '''
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        conn = dbi.connect()
        if request.method == 'GET':
            course_list = get_incomplete(conn)
            unassigned = get_unassigned(conn)
            return render_template('select.html',
                                    page_title='Select Incomplete Courses', 
                                    course_list = course_list,
                                    unassigned = unassigned)
        else: 
            cid = request.form['cid']
            return redirect(url_for('update', cid=cid))
################################################################################

@app.route('/departments/')
def departments():
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        conn = dbi.connect()
        departments = get_departments(conn)
        return render_template('departments.html',
                                page_title='Departments',
                                departments = departments)
################################################################################

@app.route('/departments/<dept_id>', methods=['GET', 'POST'])
def department_page(dept_id):
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        conn = dbi.connect()
        departments = get_departments(conn)
        name = get_dept_name(conn, dept_id) 
        courses = get_dept_courses(conn, dept_id) # dept, cnum, name, cid
        if request.method == 'POST':
            dept = request.form.get('dept')
            cnum = request.form.get('cnum')
            cid = get_cid(conn, dept, cnum)
            add_pair(conn, dept_id, cid)
            flash('Course successfully paired to this major!')
            return redirect(url_for('department_page', dept_id = dept_id))
        return render_template('department_page.html',
                                page_title = name + ' Department Page',
                                name = name,
                                courses = courses,
                                depts = departments)
################################################################################

@app.route('/update/<cid>', methods=['GET','POST'])
def update(cid):
    if (not session) or (session.get('user') != 'admin'):
        flash('Unauthorized. Log in to access page.')
        return redirect( url_for('login') )
    else:
        conn = dbi.connect()
        depts = get_departments(conn)
        if course_exists(conn, cid)==False:
            flash('This course does not exist')
            return redirect(url_for('index'))
        if request.method == 'GET':
            info = get_course_info(conn, cid)
            _,dept,cnum,name,units,max_enroll,prereq,instruct,dr,sem_offered,year_offered = info
            majors = get_pairs(conn, cid)
            return render_template('update.html',
                                    page_title='Update Course',
                                    dept = dept,
                                    cnum = cnum,
                                    name = name,
                                    units = units,
                                    max_enroll = max_enroll,
                                    prereq = prereq,
                                    instruct = instruct,
                                    dr = dr,
                                    sem_offered = sem_offered,
                                    year_offered = year_offered,
                                    cid = cid,
                                    majors = majors,
                                    depts = depts)
        else:
            if request.form['submit'] == 'update':
                dept = request.form.get('dept')
                cnum = request.form.get('cnum')
                name = request.form.get('name')
                units = request.form.get('units')
                max_enroll = request.form.get('max_enroll')
                prereq = request.form.get('prereq')
                instruct = request.form.get('instruct')
                dr = request.form.get('dr')
                sem_offered = request.form.get('sem_offered')
                year_offered = request.form.get('year_offered')
                majors = get_pairs(conn, cid)
        
                update_course(conn, cid, dept, cnum, name, units, max_enroll, 
                prereq, instruct, dr, sem_offered, year_offered)

                flash('Successfully updated!')
                return render_template('update.html',
                                    page_title='Update Course',
                                    dept = dept,
                                    cnum = cnum,
                                    name = name,
                                    units = units,
                                    max_enroll = max_enroll,
                                    prereq = prereq,
                                    instruct = instruct,
                                    dr = dr,
                                    sem_offered = sem_offered,
                                    year_offered = year_offered,
                                    cid = cid,
                                    majors = majors,
                                    depts = depts)
            elif request.form['submit'] == 'delete':
                delete_course(conn, cid)
                flash("Course successfully deleted!")
                return redirect(url_for('index'))
            elif 'delete-pair' in request.form['submit']:
                value = request.form['submit']
                # get dept id
                dept_id = value.strip('delete-pair-')
                # delete pair
                remove_pair(conn, dept_id, cid)
                flash("Course pairing deleted")
                return redirect(url_for('update', cid=cid))
            
            elif request.form['submit'] == 'add':
                # takes department name 
                new_dept = request.form.get('new_dept')
                # finds dept ID
                new_dept_id = get_dept_id(conn, new_dept)
                add_pair(conn, new_dept_id, cid)
                flash("Matched to department successfully!")
                info = get_course_info(conn, cid)
                dept = info[1]
                cnum = info[2]
                name = info[3]
                units = info[4]
                max_enroll = info[5]
                prereq = info[6]
                instruct = info[7]
                dr = info[8]
                sem_offered = info[9]
                year_offered = info[10]
                majors = get_pairs(conn, cid)
                return render_template('update.html',
                                    page_title='Update Course',
                                    dept = dept,
                                    cnum = cnum,
                                    name = name,
                                    units = units,
                                    max_enroll = max_enroll,
                                    prereq = prereq,
                                    instruct = instruct,
                                    dr = dr,
                                    sem_offered = sem_offered,
                                    year_offered = year_offered,
                                    cid = cid,
                                    majors = majors,
                                    depts = depts)
            else:
                flash("Error")

################################################################################

@app.route('/login', methods=["GET", "POST"])
def login():
    if request.method=="GET":
        return render_template('login.html',
        page_title='Login')
    else:
        user = request.form.get('user')
        pw = request.form.get('pw')
        conn = dbi.connect()
        curs = dbi.dict_cursor(conn)
        curs.execute("select hashedpw from account where user=%s", [user])
        stored = curs.fetchone().get('hashedpw')
        hashed = bcrypt.hashpw(pw.encode('utf-8'), stored.encode('utf-8'))
        hashedStr = hashed.decode('utf-8')
        if hashedStr != stored:
            flash("Login attempt failed.")
            return redirect( url_for('login') )
        else:
            session['Logged in'] = True
            session['user'] = user
            return redirect( url_for('index') )

################################################################################ 

@app.route('/logout/')
def logout():
    if 'user' in session:
        session.pop('user')
        flash('You are logged out.')
        return redirect( url_for('login') )
    else:
        flash('You are not logged in. Please log in.')
        return redirect( url_for('login') )

 ################################################################################ 
           
@app.before_first_request
def init_db():
    dbi.cache_cnf()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'majormatch_db' 
    dbi.use(db_to_use)
    print('will connect to {}'.format(db_to_use))

if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)
################################################################################
#   Import Modules
################################################################################
import cs304dbi as dbi

################################################################################
#   Helpers for courses table 
################################################################################

def insert_course(conn, dept, cnum, name, units, max_enroll, 
                  prereq, instruct, dr, sem_offered, year_offered):
    '''
    Insert course into the major match database

    Param - connection object + all the course information from catalog 
    '''
    curs = dbi.cursor(conn)
    # prepared query
    sql = '''   insert into courses(dept, cnum, `name`, units, max_enroll, 
                prereq, instruct, dr, sem_offered, year_offered)
                values (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            '''
    curs.execute(sql,   [dept, cnum, name, units, max_enroll, 
                        prereq, instruct, dr, sem_offered, year_offered])
    conn.commit()

def course_name_exists(conn, dept, cnum):
    '''
    Checks if course already exists in database

    Param - connection ojbect, department abbreviation + course number
    Return - true if course already exists
    '''
    curs = dbi.cursor(conn)
    sql = ''' select * from courses where dept = %s and cnum = %s '''
    curs.execute(sql, [dept, cnum])
    movie = curs.fetchall()
    return len(movie) > 0

def course_exists(conn, cid):
    '''
    Checks if course already exists in database

    Param - connection ojbect, department abbreviation + course number
    Return - true if course already exists
    '''
    curs = dbi.cursor(conn)
    sql = ''' select * from courses where cid = %s'''
    curs.execute(sql, [cid])
    movie = curs.fetchall()
    return len(movie) > 0

def get_course_info(conn, cid):
    '''
    Getter for course info based on the course ID

    Param - connection ojbect, course ID 
    Return - course info (in list object)
    '''
    curs = dbi.cursor(conn)
    sql = '''   select * from courses
                where cid = %s
            '''
    curs.execute(sql, [cid])
    return curs.fetchone()

def update_course(conn, cid, dept, cnum, name, units, max_enroll, prereq, 
instruct, dr, sem_offered, year_offered):
    '''
    Checks if course already exists in database

    Param - connection object + all the course information from catalog 
    Return - true if course already exists
    '''
    curs = dbi.cursor(conn)
    # prepared query
    sql = '''   update courses
                set 
                dept = %s, 
                cnum = %s, 
                name = %s, 
                units = %s, 
                max_enroll = %s, 
                prereq = %s, 
                instruct = %s, 
                dr = %s, 
                sem_offered = %s, 
                year_offered = %s 
                where cid = %s
            '''
    curs.execute(sql, [ dept, 
                        cnum, 
                        name, 
                        units, 
                        max_enroll, 
                        prereq, 
                        instruct, 
                        dr, 
                        sem_offered, 
                        year_offered, 
                        cid]
                        )
    conn.commit()

def delete_course(conn, cid):
    curs = dbi.cursor(conn)
    # prepared query
    sql = '''   delete from courses
                where cid = %s
            '''
    curs.execute(sql, [cid])
    conn.commit()

def get_incomplete(conn):
    '''
    Finds incomplete courses, where they have NULL fields (in required fields)

    Param - connection object
    Return - List of courses with incomplete information
    ''' 
    # prepared query
    curs = dbi.cursor(conn)
    sql = '''   select dept, cnum, cid from courses 
                where dept="" or dept is NULL
                or `name`="" or `name` is NULL
          '''
    curs.execute(sql)
    return curs.fetchall()

def get_unassigned(conn):
    '''
    Finds incomplete courses, where they have NULL fields (in required fields)

    Param - connection object
    Return - List of courses with incomplete information
    ''' 
    # prepared query
    curs = dbi.cursor(conn)
    sql = '''   select dept, cnum, courses.cid from courses 
                where not exists 
                (select major_pairs.cid from major_pairs 
                where courses.cid = major_pairs.cid)
          '''
    curs.execute(sql)
    return curs.fetchall()


################################################################################
#   Helpers for programs table 
################################################################################

def get_departments(conn):
    '''
    Gets departments + their information 
    
    Param - connection object
    Return - list of departments 
    '''
    curs = dbi.cursor(conn)
    sql = 'select * from programs'
    curs.execute(sql)
    return curs.fetchall()


def get_dept_id(conn, name):
    '''
    More specific getter: Finds a department's ID from their department name
    
    Param - connection object, department ID
    Return - department name 
    '''
    curs = dbi.cursor(conn)
    sql = '''   select dept_id from programs
                where name = %s
            '''
    curs.execute(sql, [name])
    return curs.fetchone()
    
def get_dept_name(conn, dept_id):
    '''
    More specific getter: Finds a department's name from their department ID
    
    Param - connection object, department ID
    Return - department name 
    '''
    curs = dbi.cursor(conn)
    sql = '''   select name from programs
                where dept_id = %s
            '''
    curs.execute(sql, [dept_id])
    row = curs.fetchone()
    return row[0]

def get_dept_courses(conn, dept_id):
    '''
    Finds the courses that count towards majors in a department 
    
    Param - connection object, department 
    Return - list of courses 
    '''
    curs = dbi.cursor(conn)
    
    sql =   ''' select dept, cnum, courses.name, courses.cid 
                from courses 
                inner join major_pairs using(cid)
                inner join programs using (dept_id)
                where dept_id = %s
            '''
    curs.execute(sql, [dept_id])
    return curs.fetchall()

################################################################################
#   Helpers for major_pairs table 
################################################################################

def add_pair(conn, dept_id, cid):
    '''
    Adds a pair of dept ID and course ID to the major pairs table 
    
    Param - connection object, department ID, course ID
    '''
    curs = dbi.cursor(conn)
    sql = '''   insert into major_pairs(dept_id, cid)
                values (%s, %s)
            ''' 
    curs.execute(sql, [dept_id, cid])
    conn.commit()

def remove_pair(conn, dept_id, cid):
    '''
    Removes a pair of dept ID and course ID to the major pairs table
    
    Param - connection object, department ID, course ID
    '''
    curs = dbi.cursor(conn)
    sql = '''   delete from major_pairs
                where dept_id = %s and cid = %s
            '''
    curs.execute(sql, [dept_id, cid])
    conn.commit()

def get_pairs(conn, cid):
    '''
    Finds majors that a course counts towards given its cid
    
    Param - connection object, course ID
    Return - tuple of department name and dept ID
    '''
    curs = dbi.cursor(conn)
    sql =   ''' select `name`, dept_id from programs 
                inner join major_pairs using(dept_id)
                where major_pairs.cid = %s
            '''
    curs.execute(sql, [cid])
    return curs.fetchall()


def get_cid(conn, dept, cnum):
    '''
    Finds a course ID based on the department abbreviation and course number
    
    Param - connection object, dept abbrev, course number
    Return - course ID
    '''
    curs = dbi.cursor(conn)
    sql = '''   select cid from courses
                where dept = %s and cnum = %s
            '''
    curs.execute(sql, [dept, cnum])
    row = curs.fetchone()
    return row[0]

<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="Major Match Team" content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
</head>



<body>
{% block nav %}
<nav>
<div class="topnav">
  <a href="{{ url_for('index') }}">Home</a>
  <a href="{{ url_for('departments') }}">Departments</a>
  <a href="{{ url_for('insert') }}">Insert Course</a>
  <a href="{{ url_for('select') }}">Incomplete Courses</a>
</div>
</nav>
{% endblock %}


{% block header %}
<!-- insert title of page -->
<h1>Wellesley College Course Editing</h1>
{% endblock %}

<main>
{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
    {% for msg in messages %}
    <p>{{msg}}</p>
    {% endfor %}
</div>
{% endif %}
{% endwith %}


{% block main_content %}
<!-- put main content here -->
{% endblock %}

<script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
{% block end_scripts %}
{% endblock %}

</main>

</body>
</html>
{% extends "base.html" %}

{% block header %}
<h1>{{ name }}</h1>
{% endblock %}

{% block main_content %}

<p style="margin:auto; text-align:center; padding-bottom:5px">Add courses that belong to this page</p>
<form method=POST action="{{ url_for('department_page', dept_id = dept_id) }}">
    <table class="table-form">
      <tr>
        <td><label for="dept">Dept.</label></td>
        <td>
        <!-- make this a drop down -->
        <input list="abbrev"  name='dept' id="dept" value="{{ dept }}" placeholder="Start typing...">
        <datalist id="abbrev">
          <option>AFR</option>
          <option>SWA</option>
          <option>AMST</option>
          <option>ANTH</option>
          <option>ARCH</option>
          <option>ARTH</option>
          <option>ASTR</option>
          <option>ASPH</option>
          <option>BIOC</option>
          <option>BISC</option>
          <option>CHPH</option>
          <option>CHEM</option>
          <option>CAMS</option>
          <option>CLCV</option>
          <option>CLST</option>
          <option>CLSC</option>
          <option>LING</option>
          <option>CPLT</option>
          <option>CS</option>
          <option>DS</option>
          <option>EALC</option>
          <option>ECON</option>
          <option>EDUC</option>
          <option>ENG</option>
          <option>ES</option>
          <option>FREN</option>
          <option>FRST</option>
          <option>GEOS</option>
          <option>GER</option>
          <option>PORT</option>
          <option>HIST</option>
          <option>IREC</option>
          <option>IRPS</option>
          <option>ITAS</option>
          <option>JPN</option>
          <option>JWST</option>
          <option>KOR</option>
          <option>LAST</option>
          <option>MATH</option>
          <option>MAS</option>
          <option>MER</option>
          <option>MES</option>
          <option>MUS</option>
          <option>NEUR</option>
          <option>PEAC</option>
          <option>PHIL</option>
          <option>PHYS</option>
          <option>POL</option>
          <option>REL</option>
          <option>RUSS</option>
          <option>RAST</option>
          <option>SOC</option>
          <option>SAS</option>
          <option>SPAN</option>
          <option>STAT</option>
          <option>ARTS</option>
          <option>THST</option>
          <option>WGST</option>
        </datalist>
      </td> 
      </tr>
      <tr>
        <td><label for="cnum">Course #</label></td>
        <td><input type="text" name='cnum' id="cnum" value="{{ cnum }}"></td> 
      </tr>
    </table>
    <input type="submit" name="submit" value="submit">
</form>

<p>Courses that count for this major</p>
<table>
    {% for course in courses %}
    <tr><td><a href="{{ url_for('update', cid=course[3]) }}">{{ course[0] }} {{ course[1] }}</a></td>
        <td>{{ course[2] }}</td></tr>
    {% endfor %}
</table>

{% endblock %}{% extends "base.html" %}


{% block header %}
<h1>Departments</h1>
{% endblock %}

{% block main_content %}

<h2>Click on a department to see its courses and insert a new course</h2>

<table class="depts-table">
    {% for dept in departments %}
    <tr><td><a id="dept_pg" href="{{ url_for('department_page', dept_id=dept[0]) }}">{{ dept[1] }} </a></td>
        <td><a id="catalog_pg" href="{{ dept[4] }}">catalog page</a></td></tr>
    {% endfor %}
</table>

{% endblock %}{% extends "base.html" %}

{% block main_content %}

<h2>Click through the top navigation bar to interact with our courses database</h2>

<img src="{{url_for('static', filename = 'cap.png')}}" alt="graduation cap logo" >
{% endblock %}
{% extends "base.html" %}

{% block header %}
<h1>Insert a New Course</h1>
{% endblock %}

{% block main_content %}
<h2>Enter new courses into our database</h2>

<form class="insert-form" method=POST action="{{ url_for('insert' )}}">
    <table class="table-form">
      <tr>
        <td><label for="dept">Department</label></td>
        <td><input type="text" name='dept' id="dept" value="{{ dept }}" required></td> 
      </tr>
      <tr>
        <td><label for="cnum">Course Number</label></td>
        <td><input type="text" name='cnum' id="cnum" value="{{ cnum }}" required></td>
      </tr>
      <tr>
        <td><label for="name">Course Name</label></td>
        <td><input type="text" name='name' id="name" value="{{ name }}" required></td>
      </tr>
      <tr>
        <td><label for="units">Units</label></td>
        <td><input type="text" name='units' id="units" value="{{ units }}"></td> 
      </tr>
      <tr>
        <td><label for="max_enroll">Max. Enrollment</label></td>
        <td><input type="text" name='max_enroll' id="max_enroll" value="{{ max_enroll }}"></td> 
      </tr>
      <tr>
        <td><label for="prereq">Prequisites</label></td>
        <td><input type="text" name='prereq' id="prereq" value="{{ prereq }}"></td> 
      </tr>
      <tr>
        <td><label for="instruct">Instructor</label></td>
        <td><input type="text" name='instruct' id="instruct" value="{{ instruct }}"></td> 
      </tr>
      <tr>
        <td><label for="dr">Distribution Requirement</label></td>
        <td><input type="text" name='dr' id="dr" value="{{ dr }}"></td> 
      </tr>
      <tr>
        <td><label for="sem_offered">Semesters Offered</label></td>
        <td><input type="text" name='sem_offered' id="sem_offered" value="{{ sem_offered }}"></td> 
      </tr>
      <tr>
        <td><label for="year_offered">Offered This Year?</label></td>
        <td><input type="text" name='year_offered' id="year_offered" value="{{ year_offered }}"></td> 
      </tr>
    </table>
    <input type="submit" name="submit" value="submit">
  </form>

{% endblock %}
{% extends "base.html" %}

{% block nav %}
{% endblock %}

{% block header %}
<!-- insert title of page -->
<h1>Login</h1>
{% endblock %}

{% block main_content %}
<form id="login" method="post" action="{{url_for('login')}}">
    <p>
        <label>
            <input type="text" name="user" placeholder="Username">
        </label>
    </p>
    <p>
        <label>
            <input type="text" name="pw" placeholder="Password">
        </label>
    </p>
    <p>
        <input type="submit" value="submit">
    </p>
</form>
{% endblock %}{% extends "base.html" %}

{% block header %}
<h1>Select Incomplete Courses</h1>
{% endblock %}

{% block main_content %}
<h2 style="padding-bottom:10px">Select a course to update any of its empty fields and help us update our database!</h2>

<form method=POST action="{{ url_for('select') }}">
    <label>Courses with missing required fields:
      <select id="cid" name="cid">
        <option value="none" selected disabled>Choose One</option>
        <!--Fills out the drop down menu with incomplete movies-->
        {% for course in course_list %}
          <option value="{{course[2]}}">{{course[0]}} {{course[1]}}</option>
        {% endfor %}
      </select>
    </label>
    <input type="submit" name="submit-btn" value="Update Course">
</form>

<h2 style="padding-top:10px">These are courses that don't point to any major</h2>
<form method=POST action="{{ url_for('select') }}">
  <label>Courses without a major:
    <select id="cid" name="cid">
      <option value="none" selected disabled>Choose One</option>
      <!--Fills out the drop down menu with incomplete movies-->
      {% for course in unassigned %}
        <option value="{{course[2]}}">{{course[0]}} {{course[1]}}</option>
      {% endfor %}
    </select>
    <input type="submit" name="submit-btn" value="Update Course">
</form>


{% endblock %}{% extends "base.html" %}

{% block header %}
<h1>Update "{{ name }}"</h1>
{% endblock %}

{% block main_content %}
    <form class="update-form" method=POST action="{{ url_for('update', cid=cid) }}">
      <table class="table-form">
        <tr>
          <td><label for="dept">Department</label></td>
          <td><input type="text" name='dept' id="dept" value="{{ dept }}"></td> 
        </tr>
        <tr>
          <td><label for="cnum">Course Number</label></td>
          <td><input type="text" name='cnum' id="cnum" value="{{ cnum }}"></td>
        </tr>
        <tr>
          <td><label for="name">Course Name</label></td>
          <td><input type="text" name='name' id="name" value="{{ name }}"></td>
        </tr>

        <tr>
          <td><label>Counted Majors</label></td>
          <td><ul>
            {% for major in majors %}
              <li style="text-align:left"><a href="{{ url_for('department_page', dept_id=major[1]) }}">{{ major[0] }}</a>
              <!-- button for delete -->
              <button type="submit" name="submit" value="delete-pair-{{major[1]}}">remove</button>
              </li>
            {% endfor %}
          </ul></td>
        </tr>
      </table>

      <table class="table-form">
        <tr>
          <td><label for="units">Units</label></td>
          <td><input type="text" name='units' id="units" value="{{ units }}"></td> 
        </tr>
        <tr>
          <td><label for="max_enroll">Max. Enrollment</label></td>
          <td><input type="text" name='max_enroll' id="max_enroll" value="{{ max_enroll }}"></td> 
        </tr>
        <tr>
          <td><label for="prereq">Prequisites</label></td>
          <td><input type="text" name='prereq' id="prereq" value="{{ prereq }}"></td> 
        </tr>
        <tr>
          <td><label for="instruct">Instructor</label></td>
          <td><input type="text" name='instruct' id="instruct" value="{{ instruct }}"></td> 
        </tr>
        <tr>
          <td><label for="dr">Distribution Requirement</label></td>
          <td><input type="text" name='dr' id="dr" value="{{ dr }}"></td> 
        </tr>
        <tr>
          <td><label for="sem_offered">Semesters Offered</label></td>
          <td><input type="text" name='sem_offered' id="sem_offered" value="{{ sem_offered }}"></td> 
        </tr>
        <tr>
          <td><label for="year_offered">Offered This Year?</label></td>
          <td><input type="text" name='year_offered' id="year_offered" value="{{ year_offered }}"></td> 
        </tr>
      </table>
      <input type="submit" name="submit" value="update">
      <input type="submit" name="submit" value="delete">
    </form>
    
    <p></p>
    
    <form method=POST action="{{ url_for('update', cid=cid) }}">
      <table class="table-form">
        <tr>
          <td><label for="new_dept">Department Name</label></td>
          <td>
          <!-- make this a drop down -->
          <input list="abbrev"  name='new_dept' id="new_dept" value="{{ new_dept }}" placeholder="Start typing...">
          <datalist id="abbrev">
            {% for dept in depts %}
            <option value="{{dept[1]}}">{{dept[1]}}</option>
            {% endfor %}
          </datalist>
        </td> 
      </table>
      <input type="submit" name="submit" value="add">
  </form>
{% endblock %}* {
    box-sizing: border-box;
    font-family: "Arial Black", "Arial";
}

html, body {
    height: 95%;
    width: 100%;
    background-color: white;
}

main{
    margin: auto;
}

img{
    margin-left: auto;
    margin-right: auto;
    display: block;
}

/********** STYLE NAVBAR **********/
.topnav {
    overflow: hidden;
    width: 100%;
    position: fixed;
    top:0;
    left:0;
    background-color: #fffdd1;

}
/* Navbar links */
.topnav a {
    float: left;
    display: block;
    color: black;
    text-align: center;
    padding: 14px 16px;
    text-decoration: none;
    font-size: 20px;
    color: #415a75;
}
/* Navbar links on mouse-over */
.topnav a:hover {
    background-color: #fee4a7;
    color: #2e4053;
}
/* Active/current link */
.topnav a:active {
    background-color:#415a75;
    color:white;
    font-weight: bold;
}

/********** STYLE BASE TEMPLATE **********/
body {
    margin-top: 75px;
}

h1 {
    font-size: 55px;
    text-align: center;
    font-weight: bolder;
    color: #415a75;
    -webkit-text-stroke-width: 1px;
    -webkit-text-stroke-color: #415a75;
    width: 95%;
    padding: 10px;
    margin: auto;
}

h2 {
    text-align: center;
    font-family: inherit;
    color:#415a75;
    font-size: large;
    margin-top: 0px;
    margin-bottom: 20px;
}

h3{
    text-align: center;
    margin-bottom: 20px;
    color: #415a75;
}

p {
    margin-left: 8px;
    font-size: 17px;
}

#messages {
    text-align: center;
    color: red;
}

/********** STYLE FORM **********/
form{
    margin:auto;
    text-align: center;
}

.update-form {
    margin-left: 8px;
}

.table-form {
    border: black solid thin;
    border-radius: 25px;
    padding: 20px;
    font-weight: bold;
    background-color:white;
    margin: auto;
    margin-bottom: 20px;

}

.depts-table{
    margin: auto;
    border: solid black thin;
    border-radius: 25px;
    padding: 20px;
}

td{
    padding: 5px;
    padding-left: 2px;
}

/* Text input on forms */
input[type=text] {
    width: 200px;
}

/* Form submit button */
input[type='submit'] {
    background-color: rgb(63, 63, 63);
    font-family: 'Gill Sans';
    font-size:medium;
    color: white;
    padding-left: 20px;
    padding-right: 20px;
    margin-left: auto;
    margin-right: auto;
  }
